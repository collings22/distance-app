{"version":3,"sources":["components/Person.js","components/List.js","components/RadiusScale.js","containers/Home.js","App.js","serviceWorker.js","index.js"],"names":["Person","props","Row","id","data","Col","sm","first_name","last_name","email","latitude","longitude","distance","List","items","map","item","ListGroup","Item","RadiusScale","React","useState","radius","Form","Group","controlId","Label","Control","onMouseDown","value","e","console","log","type","min","max","step","Home","setError","setIsLoaded","setItems","useEffect","fetch","then","res","json","result","error","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"gRAyBeA,MArBf,SAAgBC,GAEZ,OACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,UAAUF,EAAMG,KAAKD,IAC9B,kBAACE,EAAA,EAAD,CAAKC,GAAI,GACO,2BAAG,qCAAcL,EAAMG,KAAKG,WAAa,IAAMN,EAAMG,KAAKI,WACtE,2BAAG,sCAAeP,EAAMG,KAAKK,QAEjC,kBAACJ,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAG,yCAAH,IAAsBL,EAAMG,KAAKM,UACjC,2BAAG,0CAAH,IAAuBT,EAAMG,KAAKO,YAEtC,kBAACN,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAG,kDAAH,IAA+BL,EAAMG,KAAKQ,aCJvCC,MATf,SAAcC,GACZ,OAAOA,EAAMV,KAAKW,KAAI,SAACC,GAAD,OAElB,kBAACC,EAAA,EAAUC,KAAX,KACE,kBAAC,EAAD,CAAQd,KAAMY,S,OCaPG,MAlBf,WAAwB,IAAD,EACOC,IAAMC,SAAS,GADtB,mBACdC,EADc,KAQrB,OARqB,KASnB,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBAClB,kBAACF,EAAA,EAAKG,MAAN,gBAAqBJ,GACrB,kBAACC,EAAA,EAAKI,QAAN,CAAcC,YATxB,SAAsBC,EAAOC,GAC3BC,QAAQC,IAAIH,IAQqCI,KAAK,QAAQC,IAAK,EAAGC,IAAK,IAAKC,KAAM,OCsB3EC,MAhCf,WAAiB,IAAD,EACYhB,mBAAS,MADrB,mBACAiB,GADA,aAEkBjB,oBAAS,GAF3B,mBAEGkB,GAFH,aAGYlB,mBAAS,IAHrB,mBAGPP,EAHO,KAGA0B,EAHA,KAqBd,OAhBAC,qBAAU,WACRC,MAAM,gCACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACCf,QAAQC,IAAIc,GACZP,GAAY,GACZC,EAASM,MAEX,SAACC,GACCR,GAAY,GACZD,EAASS,QAGd,IAGD,6BACE,kBAAC9B,EAAA,EAAD,KACI,kBAAC,EAAD,CAAMb,KAAMU,KAEhB,kBAAC,EAAD,QChBSkC,MAVf,WAEE,OACA,kBAACC,EAAA,EAAD,KACE,4CACA,kBAAC,EAAD,QCEgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlB,GACLhB,QAAQgB,MAAMA,EAAMmB,c","file":"static/js/main.92599c2a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nfunction Person(props) {\r\n  \r\n    return (\r\n        <Row id={'person_'+props.data.id}>\r\n        <Col sm={4}>\r\n                        <p><b>Name: </b>{props.data.first_name + ' ' + props.data.last_name}</p>\r\n            <p><b>Email: </b>{props.data.email}</p>\r\n        </Col>\r\n        <Col sm={4}>\r\n            <p><b>Latitude: </b> {props.data.latitude}</p>\r\n            <p><b>Longitude: </b> {props.data.longitude}</p>\r\n        </Col>\r\n        <Col sm={4}>\r\n            <p><b>Miles from London: </b> {props.data.distance}</p>\r\n        </Col>\r\n\r\n        </Row>\r\n\r\n  );\r\n}\r\n\r\nexport default Person;\r\n\r\n","import React from \"react\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Person from \"./Person\";\r\n\r\nfunction List(items) {\r\n  return items.data.map((item) => (\r\n\r\n      <ListGroup.Item>\r\n        <Person data={item}/>\r\n      </ListGroup.Item>\r\n  ));\r\n}\r\n\r\nexport default List;\r\n\r\n","import React, { useEffect } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nfunction RadiusScale() {\r\n  const [radius, setRadius] = React.useState(0);\r\n\r\n  function updateRadius(value, e){\r\n    console.log(value)\r\n    // setRadius(value);\r\n  };\r\n\r\n  return (\r\n    <Form>\r\n        <Form.Group controlId=\"formBasicRange\">\r\n            <Form.Label>Radius: {radius}</Form.Label>\r\n            <Form.Control onMouseDown={updateRadius} type=\"range\" min={1} max={250} step={1} />\r\n        </Form.Group>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default RadiusScale;\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport List from \"../components/List\";\r\nimport RadiusScale from \"../components/RadiusScale\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nfunction Home() {\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [items, setItems] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:9000/people\")\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          console.log(result);\r\n          setIsLoaded(true);\r\n          setItems(result);\r\n        },\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      );\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <ListGroup>\r\n          <List data={items}/>\r\n      </ListGroup>\r\n      <RadiusScale/>      \r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport './App.css';\r\nimport Home from './containers/Home';\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n  <Container>\r\n    <h1>Location App</h1>\r\n    <Home/>\r\n  </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}